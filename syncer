#!/usr/bin/env ruby

require 'rubygems'
require "listen"
require 'optparse'
require 'logger'

# Logger setup
logger = Logger.new(STDERR)

logger.level = Logger::INFO
logger.datetime_format = '%Y-%m-%d %H:%M:%S'
logger.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime}   #{severity}\t#{msg}\n"
end

# Set default options
options = {
	:user => nil,
	:host => nil,
	:port => nil,
	:remote_basedir => nil,
	:exclude_patterns => [],
	:include_patterns => [],
	:delete => nil,
	:symlinks => '--links',
	:dry_run => false,
	:debug => false,
}

# Parse command line
optparse = OptionParser.new do |opts|
	# Set a banner, displayed at the top of the help screen
	opts.banner = "Usage: #{$0} [options] SRC [SRC]..."

	# Define the options, and what they do
	opts.on('-u', '--user USER', 'User name for remote host') do |user|
		options[:user] = user
	end

	opts.on('-H', '--host HOST', 'Remote host to connect') do |host|
		options[:host] = host
	end

	opts.on('-p', '--port PORT', 'Remote port to connect') do |port|
		options[:port] = port
	end

	opts.on('-d', '--directory DIR', 'Base directory on remote host') do |dir|
		options[:remote_basedir] = dir
	end

	opts.on('-e', '--exclude PATTERN[,PATTERN]...', Array, 'Exclude files matching PATTERN (rsync option)') do |p|
		options[:exclude_patterns] = p
	end

	opts.on('-i', '--include PATTERN[,PATTERN]...', Array, 'Don\'t exclude files matching PATTERN (rsync option)') do |p|
		options[:include_patterns] = p
	end

	opts.on('--delete', 'Delete remote files that have been deleted locally & delete remote files that have been excluded') do
		options[:delete] = '--delete --delete-excluded'
	end

	opts.on('--copy-links', 'Transform symlink into referent file/dir (default: copy symlinks as symlinks)') do
		options[:symlinks] = '--copy-links'
	end

	opts.on('--debug', 'Enable debug mode') do
		options[:debug] = true
	end

	opts.on('--dry-run', 'Listen without actually sync (even if logs say the opposite)') do
		options[:dry_run] = true
	end

	opts.on('-h', '--help', 'Display this screen') do
		puts opts
		exit
	end
end

optparse.parse!

# Raise exeception if something is missing
raise OptionParser::MissingArgument, "Please provide -H HOST or --host HOST." if options[:host].nil?
raise OptionParser::MissingArgument, "Please provide -d DIR or --dir DIR." if options[:remote_basedir].nil?
raise OptionParser::MissingArgument, "Please provide one or multiple sources to sync." if ARGV.empty?

# Check if local sources to sync really exists, also remove
# the trailing slash (preferable to use with rsync)
sources = ARGV.map do |s|
	raise ArgumentError, "Local ressource '#{s}' does not exist." if ! File.exists? s
	s.chomp("/")
end

logger.level = Logger::DEBUG if options[:debug]

logger.info("Syncer started!")
logger.info("Sources: #{sources.join(', ')}")
logger.debug("Options: #{options}")

# SSH command
ssh_cmd = options[:port] ? "ssh -p#{options[:port]}" : "ssh"

ssh_dest = "#{options[:host]}:#{options[:remote_basedir]}"
ssh_dest = "#{options[:user]}@#{ssh_dest}" if options[:user]

# Build rsync arguments as an array
rsync_opts = [
	"--recursive",
	"--times",
	"--perms",
	options[:symlinks],
]

rsync_opts << options[:delete] if options[:delete]
rsync_opts << "--verbose" if options[:debug]

rsync_opts.concat options[:exclude_patterns].map { |p| "--exclude '#{p}'" }
rsync_opts.concat options[:include_patterns].map { |p| "--include '#{p}'" }

# Complete rsync command
rsync = "rsync #{rsync_opts.join(" ")} --rsh='#{ssh_cmd}' #{sources.join(" ")} #{ssh_dest}"

# Initial sync
logger.debug "Rsync command: #{rsync}"
logger.info "Launch initial rsync..."
system(rsync) if ! options[:dry_run]
logger.info "Done!"

# Sync when a file is changed
listener = Listen.to(sources, :wait_for_delay => 1) do |modified, added, removed|
	logger.info "Changes detected, launch rsync..."
	system(rsync) if ! options[:dry_run]
	logger.info "Done!"
end

logger.info "Start listening."
listener.start # not blocking
sleep # blocking

exit
