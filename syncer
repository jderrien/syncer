#!/usr/bin/env ruby

require 'rubygems'
require 'rb-fsevent'
require 'optparse'
require 'etc'

skippable_directories = [ '.idea', '.git', '.svn', '.cvs' ]

# set default options
options = {
	:user => Etc.getlogin,
	:host => nil,
	:port => nil,
	:dir => nil,
	:exclude_paths => [],
	:include_paths => [],
	:follow => nil,
	:remove => nil,
	:symlink => '-L'
}

optparse = OptionParser.new do |opts|
	# Set a banner, displayed at the top
	# of the help screen.
	opts.banner = "Usage: #{$0} [options] file1 file2 ..."

	# Define the options, and what they do
	opts.on('-u', '--user USER', 'User name for remote host') do |user|
		options[:user] = user
	end

	opts.on('-H', '--host HOST', 'Remote host to connect') do |host|
		options[:host] = host
	end

	opts.on('-p', '--port PORT', 'Remote port to connect') do |port|
		options[:port] = port
	end

	opts.on('-d', '--directory DIR', 'Base directory on remote host') do |dir|
		options[:dir] = dir
	end

	opts.on('-e', '--exclude-paths PATH[,PATH[...]]', Array, 'File paths to exclude from the sync') do |paths|
		options[:exclude_paths] = paths
	end

	opts.on('-i', '--include-paths PATH[,PATH[...]]', Array, 'File paths to include in the sync') do |paths|
		options[:include_paths] = paths
	end

	opts.on('-f', '--follow-symlinks', 'Listen to symlinked directories') do
		options[:follow] = true
	end

	opts.on('-r', '--delete', 'Remove remote files that have been deleted locally') do |remove|
		options[:remove] = '--delete'
	end

	opts.on('-s', '--preserve-symlinks', 'Preserve symlinks') do
		options[:symlink] = '-l'
	end

	# This displays the help screen, all programs are
	# assumed to have this option.
	opts.on('-h', '--help', 'Display this screen') do
		puts opts
		exit
	end
end

optparse.parse!

raise OptionParser::MissingArgument, "Please provide -H HOST or --host HOST." if options[:host].nil?
raise OptionParser::MissingArgument, "Please provide -d DIR or --dir DIR." if options[:dir].nil?

exclude_paths = options[:exclude_paths].map { |p| "--exclude '#{p}'" }.join(' ')
include_paths = options[:include_paths].map { |p| "--include '#{p}'" }.join(' ')

d=File.basename Dir.pwd


if options[:port] then
	options[:ssh] = "ssh -p#{options[:port]}"	
else 
	options[:ssh] = "ssh"	
end

fsevent = FSEvent.new
Dir.chdir '..'

sync = "rsync #{options[:symlink]} -C #{options[:remove]} -rt --rsh='#{options[:ssh]}' #{include_paths} #{exclude_paths} '#{d}' '#{options[:user]}@#{options[:host]}:#{options[:dir]}'" 

system "/usr/local/bin/growlnotify -a 'Network Utility' -m 'Syncer2.0 started'"
system sync
system "/usr/local/bin/growlnotify -a 'Network Utility' -m 'Initial sync complete'"

fsevent.watch d do |directories|
	system sync

	if !directories.inspect.scan(Regexp.new(skippable_directories.join('|')))
		system "/usr/local/bin/growlnotify -a 'Network Utility' -m 'Synced changes inside: #{directories.inspect}'"
	end
end

fsevent.run
